// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model users {
  id             Int              @id @default(autoincrement())
  name          String            @unique(map: "name") @db.VarChar(255)
  password       String           @db.VarChar(255)
  avatar         String?          @db.VarChar(1000)
  permissions    String?          @db.VarChar(4000)
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  role           Role             @default(GENERAL)
  is_active      Boolean          @default(true)
  last_login     DateTime?        @db.DateTime(0)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  deleted_at     DateTime?        @db.DateTime(0)
  updated_at     DateTime?        @updatedAt
  sessions       sessions[]
  compartiment   compartimente?   @relation("ResponsabilCompartiment")
  modificariAngajamente ModificariAngajamente[]
}



model sessions {
  id           Int       @id @default(autoincrement())
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id      Int
  sid          String    @unique(map: "sid")
  is_active    Boolean
  start_time   DateTime  @default(now())
  end_time     DateTime?
  access_token String?    @db.VarChar(4000)
  csrf_token   String?    @db.VarChar(255)
  ip_address   String?
  updated_at   DateTime? @updatedAt
}

enum Role {
  ADMIN
  GENERAL
  CFPP
  RESPONSABIL
  ECONOMIST
  CONTABIL
}

model institutie {
  id           Int       @id @default(autoincrement())
  denumire   String?    @db.VarChar(255)
  adresa   String?    @db.VarChar(255)
  cui   String?    @db.VarChar(255)
  reprezentant   String?    @db.VarChar(255)
  observatii   String?    @db.VarChar(255)
 
}

model sursefinantare {
  id           Int       @id @default(autoincrement())
  denumire   String    @db.VarChar(255)
  cod   String    @db.VarChar(64)
  scurt   String    @db.VarChar(64)
  stare   String?  @default("activ")  @db.VarChar(24)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @updatedAt
  categorii Categorii[]
  bugete Bugete[]
}

model articolebugetare {
  id           Int       @id @default(autoincrement())
  denumire   String    @db.VarChar(255)
  cod   String    @db.VarChar(64)
  iban   String?    @db.VarChar(24)
  codang   String?    @db.VarChar(24)
  indicator   String?    @db.VarChar(24)
  stare   String?  @default("activ")  @db.VarChar(24)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @updatedAt
  categorii Categorii[]
  bugete Bugete[]
}

model compartimente {
  id           Int       @id @default(autoincrement())
  denumire   String    @db.VarChar(255)
  idresponsabil   Int    @unique
  responsabil     users   @relation("ResponsabilCompartiment", fields: [idresponsabil], references: [id])
  stare   String?  @default("activ")  @db.VarChar(24)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @updatedAt
  categorii Categorii[]
  angajamente Angajamente[]
  receptii        Receptii[]
}

model Categorii {
  id             Int               @id @default(autoincrement())
  denumire       String            @db.VarChar(255)
  explicatii     String            @db.Text
  idsursa        Int
  idarticol      Int
  idcompartiment Int
  stare          String?           @default("activ") @db.VarChar(24)
  created_at     DateTime          @default(now()) @db.DateTime(0)
  updated_at     DateTime?         @updatedAt
  
  sursaFinantare sursefinantare    @relation(fields: [idsursa], references: [id])
  articolBugetar articolebugetare  @relation(fields: [idarticol], references: [id])
  compartiment   compartimente     @relation(fields: [idcompartiment], references: [id])
  angajamente Angajamente[]
}

model Bugete {
  id             Int              @id @default(autoincrement())
  idSursa        Int
  sursaFinantare sursefinantare   @relation(fields: [idSursa], references: [id])
  idArticol      Int
  articolBugetar articolebugetare @relation(fields: [idArticol], references: [id])
  codarticol     String?          @db.VarChar(255)
  explicatii     String?          @db.VarChar(255)
  trimI          Decimal          @default(0) @db.Decimal(15, 2)
  trimII         Decimal          @default(0) @db.Decimal(15, 2)
  trimIII        Decimal          @default(0) @db.Decimal(15, 2)
  trimIV         Decimal          @default(0) @db.Decimal(15, 2)
  total          Decimal          @default(0) @db.Decimal(15, 2)
  created_at     DateTime         @default(now()) @db.DateTime(0)
  lastUpdated    DateTime         @updatedAt

  @@unique([idSursa, idArticol])
}

model furnizori {
  id          Int       @id @default(autoincrement())
  id_user     Int?
  denumire    String    @db.VarChar(120)
  regcom      String?   @db.VarChar(120)
  localitate  String?   @db.VarChar(50)
  judet       String    @db.VarChar(50)
  codfiscal   String    @db.VarChar(13)
  banca       String?   @db.VarChar(120)
  iban        String?   @db.VarChar(24)
  tara        String    @db.VarChar(50)
  perscontact String?   @db.VarChar(60)
  platitortva Boolean   @default(false)
  adresa      String    @db.VarChar(120)
  email       String?   @db.VarChar(50)
  telefon     String?   @db.VarChar(20)
  created_at  DateTime  @default(now()) @db.DateTime(0)
  updated_at  DateTime? @updatedAt

  receptii        Receptii[]
  ordonantari OrdonantariPlata[]
}

model Regviza {
  id            Int      @id @default(autoincrement())
  userid        Int
  nume          String   @db.VarChar(40)
  nrviza        Int
  nrvizac       String   @db.VarChar(12)
  dataviza      DateTime
  document      String   @db.VarChar(40)
  explicatii    String   @db.VarChar(80)
  compartiment  String   @db.VarChar(40)
  valoare       Decimal  @db.Decimal(13, 2)
  stare         String   @db.VarChar(12)

  @@map("regviza")
}

model Angajamente {
  id                Int                    @id @default(autoincrement())
  numar             String                 @unique // număr unic pentru angajament
  data              DateTime               @default(now())
  idCategorie       Int
  categorie         Categorii              @relation(fields: [idCategorie], references: [id])
  idCompartiment    Int
  compartiment      compartimente          @relation(fields: [idCompartiment], references: [id])
  descriere         String                 @db.Text
  exercitiuBugetar  Int
  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt
  modificari        ModificariAngajamente[]

  @@index([exercitiuBugetar, idCompartiment])
  @@index([idCategorie, exercitiuBugetar])

  receptii        Receptii[]
}

model ModificariAngajamente {
  id                  Int           @id @default(autoincrement())
  idAngajament        Int
  angajament          Angajamente   @relation(fields: [idAngajament], references: [id])
  tipModificare      TipModificare
  suma               Decimal       @db.Decimal(15, 2)
  motiv              String        @db.Text
  idUser             Int
  user               users         @relation(fields: [idUser], references: [id])
  sumaBuget          Decimal       @db.Decimal(15, 2)  // suma din buget la momentul modificării
  disponibilBugetar  Decimal       @db.Decimal(15, 2)  // disponibil bugetar la momentul modificării
  vizaCFPP           Boolean       @default(false)     // status viză CFPP
  nr_viza            String?                           // numărul vizei CFPP
  dataCFPP           DateTime?                         // data acordării vizei CFPP
  codang   String?    @db.VarChar(24)
  indicator   String?    @db.VarChar(24)
  created_at         DateTime      @default(now())

  @@index([idAngajament, created_at])
}

enum TipModificare {
  MAJORARE
  DIMINUARE
}

model Receptii {
  id             Int           @id @default(autoincrement())
  idAngajament   Int
  angajament     Angajamente   @relation(fields: [idAngajament], references: [id])
  idFurnizor     Int
  furnizor       furnizori     @relation(fields: [idFurnizor], references: [id])
   nrfact          String        @default("-") @db.VarChar(24)
  datafact       DateTime
  valoare        Decimal       @db.Decimal(15, 2)
  mentiuni       String?       @db.Text
  stare          String        @default("activ") @db.VarChar(24)
  idCompartiment Int
  compartiment   compartimente @relation(fields: [idCompartiment], references: [id])
  created_at     DateTime      @default(now()) @db.DateTime(0)
  updated_at     DateTime?     @updatedAt

  @@index([idAngajament, datafact])
  @@index([idFurnizor, datafact])
  @@index([idCompartiment, datafact])

  ordonantari    ReceptiiOrdonantari[]
}

model OrdonantariPlata {
  id            Int       @id @default(autoincrement())
  numar         String    @unique // Format: O2024-00001
  dataord       DateTime  @default(now())
  idFurnizor    Int
  furnizor      furnizori @relation(fields: [idFurnizor], references: [id])
  valoare       Decimal   @db.Decimal(15, 2)
  stare         String    @default("activ") @db.VarChar(24)
  explicatii    String?   @db.Text
  created_at    DateTime  @default(now()) @db.DateTime(0)
  updated_at    DateTime? @updatedAt

  // Relation to track which receptions are included in this payment order
  receptii      ReceptiiOrdonantari[]

  @@index([idFurnizor, dataord])

}

// Junction table to handle many-to-many relationship between Receptii and OrdonantariPlata
model ReceptiiOrdonantari {
  id              Int             @id @default(autoincrement())
  idOrdonantare   Int
  ordonantare     OrdonantariPlata @relation(fields: [idOrdonantare], references: [id])
  idReceptie      Int
  receptie        Receptii        @relation(fields: [idReceptie], references: [id])
  created_at      DateTime        @default(now()) @db.DateTime(0)

  @@unique([idOrdonantare, idReceptie])
  @@index([idReceptie])
}